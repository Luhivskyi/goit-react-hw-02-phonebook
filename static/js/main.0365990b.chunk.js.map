{"version":3,"sources":["Components/ContactForm/ContactForm.js","Components/ContactsList/ContactListItem.js","Components/ContactsList/ContactList.js","Components/Filter/Filter.js","App.js","index.js"],"names":["INITIAL__STATE","name","number","ContactForm","state","handleChangeForm","target","value","setState","handleFormSubmit","event","preventDefault","onAdd","props","validateForm","id","uuid","resetForm","onCheckUnique","alert","this","onSubmit","type","pattern","title","required","onChange","Component","ContactListItem","onRemove","onClick","ContactsList","contacts","map","contact","key","Filter","filter","placeholder","App","handleAddContact","newContact","handleCheckUnique","isExistContact","find","handleRemoveContact","handleFilterChange","getVisibleContacts","toLowerCase","includes","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0365990b.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst INITIAL__STATE = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onAdd: PropTypes.func.isRequired,\r\n    onCheckUnique: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = INITIAL__STATE;\r\n\r\n  handleChangeForm = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { onAdd } = this.props;\r\n    const isValidatedForm = this.validateForm();\r\n    if (!isValidatedForm) return;\r\n    onAdd({ id: uuid(), name, number });\r\n\r\n    this.resetForm();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    const { onCheckUnique } = this.props;\r\n    if (!name || !number) {\r\n      alert('Some fild is empty');\r\n      return false;\r\n    }\r\n    return onCheckUnique(name);\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleFormSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChangeForm}\r\n          value={name}\r\n        />\r\n\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChangeForm}\r\n          value={number}\r\n        />\r\n\r\n        {/* <input type='text' name='name' placeholder='Enter name' value={name} onChange={this.handleChangeForm} />\r\n                <input type='tel' name='phone' placeholder='Enter phone number' value={phone} onChange={this.handleChangeForm }/> */}\r\n        <button type=\"submit\">Add Contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li>\r\n      {name}: {number} <button onClick={() => onRemove(id)}>delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactListItem from './ContactListItem';\r\n\r\nconst ContactsList = ({ contacts, onRemove }) => {\r\n  // if (contacts.length === 0) return null\r\n  return (\r\n    <ul>\r\n      {contacts.map(contact => (\r\n        <ContactListItem {...contact} onRemove={onRemove} key={contact.id} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import PropTypes from 'prop-types';\r\n\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n\r\n    return (\r\n        <input type='text'\r\n            name='filter'\r\n            value={filter}\r\n            onChange={(event) => onChange(event.target.value)}\r\n            placeholder='Enter name for Search' />\r\n    )\r\n}\r\n\r\n    Filter.propTypes = {\r\n        filter: PropTypes.string.isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n    \r\n};\r\n\r\nexport default Filter","import { Component } from 'react';\r\n\r\nimport ContactForm from './Components/ContactForm';\r\nimport ContactsList from './Components/ContactsList';\r\n// import ContactListItem from './Components/ContactsList'\r\nimport Filter from './Components/Filter';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  };\r\n\r\n  handleAddContact = newContact =>\r\n    this.setState(({ contacts }) => ({\r\n      contacts: [...contacts, newContact],\r\n    }));\r\n\r\n  handleCheckUnique = name => {\r\n    const { contacts } = this.state;\r\n    const isExistContact = !!contacts.find(contact => contact.name === name);\r\n\r\n    isExistContact && alert('Contact is already exist');\r\n    return !isExistContact;\r\n  };\r\n\r\n  handleRemoveContact = id =>\r\n    this.setState(({ contacts }) => ({\r\n      contacts: contacts.filter(contact => contact.id !== id),\r\n    }));\r\n\r\n  handleFilterChange = filter => this.setState({ filter });\r\n\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n\r\n    return (\r\n      <>\r\n        <h2> Form Contact</h2>\r\n        <ContactForm\r\n          onAdd={this.handleAddContact}\r\n          onCheckUnique={this.handleCheckUnique}\r\n        />\r\n        <h2> Contacts List</h2>\r\n        <ContactsList\r\n          contacts={visibleContacts}\r\n          onRemove={this.handleRemoveContact}\r\n        />\r\n\r\n        <h2> Filter</h2>\r\n        <Filter filter={filter} onChange={this.handleFilterChange} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}