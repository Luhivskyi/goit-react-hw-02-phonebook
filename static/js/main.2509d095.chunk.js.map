{"version":3,"sources":["Components/ContactForm/ContactForm.js","Components/ContactsList/ContactListItem.js","Components/ContactsList/ContactList.js","Components/Filter/Filter.js","App.js","index.js"],"names":["INITIAL__STATE","name","number","ContactForm","state","handleChangeForm","target","value","setState","handleFormSubmit","event","preventDefault","onAdd","props","validateForm","id","uuid","resetForm","onCheckUnique","alert","this","onSubmit","type","pattern","title","required","onChange","Component","ContactListItem","phone","onRemove","onClick","ContactsList","contacts","map","contact","Filter","filter","placeholder","App","handleAddContact","newContact","handleCheckUnique","isExistContact","find","handleRemoveContact","handleFilterChange","getVisibleContacts","toLowerCase","includes","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2509d095.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {v4 as uuid} from 'uuid'\r\n\r\nconst INITIAL__STATE = {\r\n     name: \"\",\r\n        number: \"\",\r\n}\r\n\r\nclass ContactForm extends Component {\r\n   static propTypes = {\r\n    onAdd : PropTypes.func.isRequired,\r\n    onCheckUnique: PropTypes.func.isRequired,\r\n  };\r\n        \r\n\r\n    state = INITIAL__STATE;\r\n\r\n    handleChangeForm = ({ target }) => {\r\n    \r\n        const { name, value } = target;\r\n        this.setState({[name]: value})\r\n}\r\n\r\n    handleFormSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n        const { name, number } = this.state;\r\n        const { onAdd } = this.props;\r\n        const isValidatedForm = this.validateForm()\r\n        if (!isValidatedForm)   return\r\n        onAdd({ id: uuid(), name, number })\r\n        this.resetForm()\r\n    }\r\n    \r\n\r\n    validateForm = () => {\r\nconst { name, number } = this.state;\r\n        const { onCheckUnique } = this.props;\r\n        if (!name || !number) {\r\n            alert('Some fild is empty')\r\n            return false\r\n        }\r\n        return onCheckUnique(name);\r\n    }\r\n    \r\n    \r\n    resetForm = () => this.setState(INITIAL__STATE)\r\n\r\n    \r\n    \r\n    render() {\r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n\r\n            <form onSubmit={this.handleFormSubmit}>\r\n\r\n<input\r\n  type=\"text\"\r\n  name=\"name\"\r\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n  required onChange={this.handleChangeForm} \r\n/>\r\n\r\n                <input\r\n  type=\"tel\"\r\n  name=\"number\"\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n  required onChange={this.handleChangeForm }\r\n/>\r\n  \r\n                {/* <input type='text' name='name' placeholder='Enter name' value={name} onChange={this.handleChangeForm} />\r\n                <input type='tel' name='phone' placeholder='Enter phone number' value={phone} onChange={this.handleChangeForm }/> */}\r\n<button type='submit'>Add Contact</button>\r\n            </form>\r\n        )\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst ContactListItem = ({ id, name, phone, onRemove }) => {\r\n    \r\n    return <li>\r\n{name}: {phone} <button onClick={() =>onRemove(id)}>delete</button>\r\n\r\n    </li>\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    phone: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default ContactListItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactListItem from './ContactListItem'\r\n\r\n\r\nconst ContactsList = ({ contacts, onRemove }) => {\r\n    \r\n    // if (contacts.length === 0) return null\r\n    return (\r\n        <ul>\r\n            {contacts.map(contact => <ContactListItem{...contact} onRemove={onRemove }/>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nContactsList.propTypes = {\r\n    contacts: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default ContactsList;","import PropTypes from 'prop-types';\r\n\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n\r\n    return (\r\n        <input type='text'\r\n            name='filter'\r\n            value={filter}\r\n            onChange={(event) => onChange(event.target.value)}\r\n            placeholder='Enter name for Search' />\r\n    )\r\n}\r\n\r\n    Filter.propTypes = {\r\n        filter: PropTypes.string.isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n    \r\n};\r\n\r\nexport default Filter","import { Component } from 'react';\r\n\r\nimport ContactForm from './Components/ContactForm';\r\nimport ContactsList from './Components/ContactsList';\r\n// import ContactListItem from './Components/ContactsList'\r\nimport Filter from './Components/Filter'\r\n\r\nexport default class App extends Component {\r\n\r\n    state = {\r\n        contacts: [\r\n            { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n            { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n        ],\r\n        filter: '',\r\n    \r\n    }\r\n\r\n    handleAddContact = (newContact) =>\r\n        this.setState(({ contacts }) => ({\r\n        contacts: [...contacts, newContact],\r\n    \r\n    }))\r\n\r\n    handleCheckUnique = (name) => {\r\n        const { contacts } = this.state;\r\n        const isExistContact = !!contacts.find(contact => contact.name === name)\r\n\r\n        isExistContact && alert('Contact is already exist')\r\n        return !isExistContact\r\n    }\r\n    \r\n    handleRemoveContact = (id) => this.setState(({contacts}) => ({contacts: contacts.filter((contact)=> contact.id !== id)}))\r\n\r\n    handleFilterChange = (filter) => this.setState({ filter })\r\n    \r\n    getVisibleContacts = () => {\r\n        const { contacts, filter } = this.state;\r\n        return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\r\n    }\r\n\r\n    render() {\r\n        const {  filter }= this.state\r\n        const visibleContacts = this.getVisibleContacts();\r\n        return (\r\n           \r\n            <>\r\n            <h2> Form Contact</h2>\r\n                <ContactForm onAdd={this.handleAddContact} onCheckUnique={this.handleCheckUnique} />\r\n                <h2> Contacts List</h2>\r\n                <ContactsList contacts={visibleContacts} onRemove={this.handleRemoveContact} />\r\n                \r\n                <h2> Filter</h2>\r\n                <Filter filter={filter} onChange={this.handleFilterChange }/>\r\n        </>\r\n        )\r\n    }\r\n}","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}